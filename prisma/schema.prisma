// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  name     String?
  password String

  workInterval     Int?              @default(50) @map("work_interval")
  breakInterval    Int?              @default(10) @map("break_interval")
  intervalsCount   Int?              @default(70) @map("intervals_count")
  tasks            Task[]
  timeBlocks       TimeBlock[]
  pomodoroSessions PomodoroSession[]

  @@map("user")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  name     String
  color    String
  duration Int
  order    Int    @default(1)

  @@map("time_block")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  isCompleted    Boolean?        @default(false) @map("is_completed")
  pomodoroRounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  pomodoroSession   PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)
  pomodoroSessionId String          @map("pomodoro_session_id")

  isCompleted  Boolean? @default(false) @map("is_completed")
  totalSeconds Int      @map("total_seconds")

  @@map("pomodoro_round")
}

enum Priority {
  low
  medium
  high
}
